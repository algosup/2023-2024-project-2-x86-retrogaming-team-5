org 100h

%define SPRITEw 16
%define SPRITEh 16
section .data

XPOS dw 27040

xVel dw 1

spriteW dw 16

old_XpOS dw 27040

spriteH dw 16

arrow       db 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            db 0x25, 0x25, 0x25, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 

section .text

   mov ah, 00h ; set video mode requirement
   mov al, 13h ; set video mode option o 320 x 200 256 colors
   int 10h

      call Clear_Old_Sprite
      call draw_menu
      call Read_Character_Key_Was_Pressed
        
        ; Delay to slow down animation
      mov cx, 64000
 ; End of game, return to text mode
    mov ax, 03h
    int 10h
    mov ax, 4C00h
    int 21h
; Function to read key pressed
Read_Character_Key_Was_Pressed:
   mov ah, 00h
   int 16h
   cmp ah, 0E0h
   jne Handle_Input
   ret

Handle_Input:
   cmp ah, 48h   ; Up key ;48H        
   je move_up
   cmp ah, 50h  ; Down key ;50h
   je move_down
   ret

   ret

Clear_Old_Sprite:
   
; Clear sprite at old position
    mov ax, 0A000h
    mov es, ax
    neg word [xVel]  ; Y * screen width
    add bx, [old_XpOS]  ; + X
    mov di, bx         ; DI = starting address for erasure
    mov cx, SPRITEh    ; Sprite height
.Clear_Line:
    push cx
    mov cx, SPRITEw    ; Sprite width
    mov al, 0          ; Background color for erasing
    rep stosb          ; Clear pixels with background color
    pop cx
    add di, 320 - SPRITEw  ; Move to next line for deletion
    loop .Clear_Line
    ret

move_up:
    mov bx, [XPOS]
    sub bx, SPRITEw
    mov [XPOS], bx
    ret

move_down:
    mov bx, [XPOS]
    add bx, SPRITEw
    mov [XPOS], bx
    ret





; si most have the sprite adress
; di most have the target adress
draw_menu:
    mov ax, 0xA000
    mov es, ax
    mov dx, 16
    .eachLine:
        mov cx, 16
        rep movsb
        add di, 320-16
        dec dx
        jnz .eachLine
        ret